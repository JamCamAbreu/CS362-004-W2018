        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6553:    8:int compare(const void* a, const void* b) {
     6553:    9:  if (*(int*)a > *(int*)b)
     3310:   10:    return 1;
     3243:   11:  if (*(int*)a < *(int*)b)
     3028:   12:    return -1;
      215:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
       20:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
        2:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1058:  214:  while (state->deckCount[player] > 0) {
     1022:  215:    card = floor(Random() * state->deckCount[player]);
     1022:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1022:  217:    newDeckPos++;
    82695:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    81673:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1022:  221:    state->deckCount[player]--;
        -:  222:  }
     1040:  223:  for (i = 0; i < newDeckPos; i++) {
     1022:  224:    state->deck[player][i] = newDeck[i];
     1022:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:
        -:  232:
       49:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
       49:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
       49:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
       49:  245:  if ( state->numActions < 1 )
        -:  246:    {
       41:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
        8:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
        8:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
        8:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
        8:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
        8:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
        8:  271:  return 0;
        -:  272:}
        -:  273:
        -:  274:
        -:  275:
        -:  276:
        -:  277:
       34:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
       34:  286:  who = state->whoseTurn;
        -:  287:
       34:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
       34:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
       34:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
       34:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
       34:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
       34:  305:    state->coins = (state->coins) - (getCost(supplyPos));
       34:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
       34:  314:  return 0;
        -:  315:}
        -:  316:
        -:  317:
        -:  318:
        -:  319:
        -:  320:
      274:  321:int numHandCards(struct gameState *state) {
      274:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
        -:  325:
        -:  326:
        -:  327:
      534:  328:int handCard(int handPos, struct gameState *state) {
      534:  329:  int currentPlayer = whoseTurn(state);
      534:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:
        -:  334:
        -:  335:
       68:  336:int supplyCount(int card, struct gameState *state) {
       68:  337:  return state->supplyCount[card];
        -:  338:}
        -:  339:
        -:  340:
        -:  341:
        -:  342:
        -:  343:
    #####:  344:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  345:  int i;
    #####:  346:  int count = 0;
        -:  347:
    #####:  348:  for (i = 0; i < state->deckCount[player]; i++)
        -:  349:    {
    #####:  350:      if (state->deck[player][i] == card) count++;
        -:  351:    }
        -:  352:
    #####:  353:  for (i = 0; i < state->handCount[player]; i++)
        -:  354:    {
    #####:  355:      if (state->hand[player][i] == card) count++;
        -:  356:    }
        -:  357:
    #####:  358:  for (i = 0; i < state->discardCount[player]; i++)
        -:  359:    {
    #####:  360:      if (state->discard[player][i] == card) count++;
        -:  361:    }
        -:  362:
    #####:  363:  return count;
        -:  364:}
        -:  365:
        -:  366:
        -:  367:
      886:  368:int whoseTurn(struct gameState *state) {
      886:  369:  return state->whoseTurn;
        -:  370:}
        -:  371:
        -:  372:
        -:  373:
       35:  374:int endTurn(struct gameState *state) {
        -:  375:  int k;
        -:  376:  int i;
       35:  377:  int currentPlayer = whoseTurn(state);
        -:  378:  
        -:  379:  //Discard hand
      226:  380:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      191:  381:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      191:  382:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  383:  }
       35:  384:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  385:    
        -:  386:  //Code for determining the player
       35:  387:  if (currentPlayer < (state->numPlayers - 1)){ 
       18:  388:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  389:  }
        -:  390:  else{
       17:  391:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  392:  }
        -:  393:
       35:  394:  state->outpostPlayed = 0;
       35:  395:  state->phase = 0;
       35:  396:  state->numActions = 1;
       35:  397:  state->coins = 0;
       35:  398:  state->numBuys = 1;
       35:  399:  state->playedCardCount = 0;
       35:  400:  state->handCount[state->whoseTurn] = 0;
        -:  401:
        -:  402:  //int k; move to top
        -:  403:  //Next player draws hand
      210:  404:  for (k = 0; k < 5; k++){
      175:  405:    drawCard(state->whoseTurn, state);//Draw a card
        -:  406:  }
        -:  407:
        -:  408:  //Update money
       35:  409:  updateCoins(state->whoseTurn, state , 0);
        -:  410:
       35:  411:  return 0;
        -:  412:}
        -:  413:
        -:  414:
        -:  415:
        -:  416:
       36:  417:int isGameOver(struct gameState *state) {
        -:  418:  int i;
        -:  419:  int j;
        -:  420:	
        -:  421:  //if stack of Province cards is empty, the game ends
       36:  422:  if (state->supplyCount[province] == 0)
        -:  423:    {
        1:  424:      return 1;
        -:  425:    }
        -:  426:
        -:  427:  //if three supply pile are at 0, the game ends
       35:  428:  j = 0;
      910:  429:  for (i = 0; i < 25; i++) {
      875:  430:      if (state->supplyCount[i] == 0)
    #####:  431:	      j++;
        -:  432:  }
       35:  433:  if ( j >= 3) {
    #####:  434:      return 1;
        -:  435:  }
        -:  436:
       35:  437:  return 0;
        -:  438:}
        -:  439:
        -:  440:
        -:  441:
        2:  442:int scoreFor (int player, struct gameState *state) {
        -:  443:  int i;
        2:  444:  int score = 0;
        -:  445:  //score from hand
        7:  446:  for (i = 0; i < state->handCount[player]; i++)
        -:  447:    {
        5:  448:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  449:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  450:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  451:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  452:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  453:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        -:  456:  //score from discard
       35:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
       33:  459:      if (state->discard[player][i] == curse) { score = score - 1; };
       33:  460:      if (state->discard[player][i] == estate) { score = score + 1; };
       33:  461:      if (state->discard[player][i] == duchy) { score = score + 3; };
       33:  462:      if (state->discard[player][i] == province) { score = score + 6; };
       33:  463:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       33:  464:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  465:    }
        -:  466:
        -:  467:  //score from deck
       35:  468:  for (i = 0; i < state->discardCount[player]; i++)
        -:  469:    {
       33:  470:      if (state->deck[player][i] == curse) { score = score - 1; };
       33:  471:      if (state->deck[player][i] == estate) { score = score + 1; };
       33:  472:      if (state->deck[player][i] == duchy) { score = score + 3; };
       33:  473:      if (state->deck[player][i] == province) { score = score + 6; };
       33:  474:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       33:  475:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  476:    }
        -:  477:
        2:  478:  return score;
        -:  479:}
        -:  480:
        -:  481:
        -:  482:
    #####:  483:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  484:  int i;	
        -:  485:  int j;
        -:  486:  int highScore;
        -:  487:  int currentPlayer;
        -:  488:
        -:  489:  //get score for each player
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
        -:  492:      //set unused player scores to -9999
    #####:  493:      if (i >= state->numPlayers)
        -:  494:	{
    #####:  495:	  players[i] = -9999;
        -:  496:	}
        -:  497:      else
        -:  498:	{
    #####:  499:	  players[i] = scoreFor (i, state);
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if (players[i] > players[j])
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //add 1 to players who had less turns
    #####:  515:  currentPlayer = whoseTurn(state);
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore && i > currentPlayer )
        -:  519:	{
    #####:  520:	  players[i]++;
        -:  521:	}
        -:  522:    }
        -:  523:
        -:  524:  //find new highest score
    #####:  525:  j = 0;
    #####:  526:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  527:    {
    #####:  528:      if ( players[i] > players[j] )
        -:  529:	{
    #####:  530:	  j = i;
        -:  531:	}
        -:  532:    }
    #####:  533:  highScore = players[j];
        -:  534:
        -:  535:  //set winners in array to 1 and rest to 0
    #####:  536:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
    #####:  538:      if ( players[i] == highScore )
        -:  539:	{
    #####:  540:	  players[i] = 1;
        -:  541:	}
        -:  542:      else
        -:  543:	{
    #####:  544:	  players[i] = 0;
        -:  545:	}
        -:  546:    }
        -:  547:
    #####:  548:  return 0;
        -:  549:}
        -:  550:
        -:  551:
        -:  552:
        -:  553:
        -:  554:
     2199:  555:int drawCard(int player, struct gameState *state)
        -:  556:{	int count;
        -:  557:  int deckCounter;
     2199:  558:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  559:    
        -:  560:    //Step 1 Shuffle the discard pile back into a deck
        -:  561:    int i;
        -:  562:    //Move discard to deck
     1018:  563:    for (i = 0; i < state->discardCount[player];i++){
     1002:  564:      state->deck[player][i] = state->discard[player][i];
     1002:  565:      state->discard[player][i] = -1;
        -:  566:    }
        -:  567:
       16:  568:    state->deckCount[player] = state->discardCount[player];
       16:  569:    state->discardCount[player] = 0;//Reset discard
        -:  570:
        -:  571:    //Shufffle the deck
       16:  572:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  573:   
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  576:    }
        -:  577:    
       16:  578:    state->discardCount[player] = 0;
        -:  579:
        -:  580:    //Step 2 Draw Card
       16:  581:    count = state->handCount[player];//Get current player's hand count
        -:  582:    
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:    
       16:  587:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  588:
       16:  589:    if (deckCounter == 0)
    #####:  590:      return -1;
        -:  591:
       16:  592:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       16:  593:    state->deckCount[player]--;
       16:  594:    state->handCount[player]++;//Increment hand count
        -:  595:  }
        -:  596:
        -:  597:  else{
     2183:  598:    int count = state->handCount[player];//Get current hand count for player
        -:  599:    int deckCounter;
        -:  600:    if (DEBUG){//Debug statements
        -:  601:      printf("Current hand count: %d\n", count);
        -:  602:    }
        -:  603:
     2183:  604:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2183:  605:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2183:  606:    state->deckCount[player]--;
     2183:  607:    state->handCount[player]++;//Increment hand count
        -:  608:  }
        -:  609:
     2199:  610:  return 0;
        -:  611:}
        -:  612:
        -:  613:
        -:  614:
        -:  615:
       68:  616:int getCost(int cardNumber)
        -:  617:{
       68:  618:  switch( cardNumber ) 
        -:  619:    {
        -:  620:    case curse:
    #####:  621:      return 0;
        -:  622:    case estate:
    #####:  623:      return 2;
        -:  624:    case duchy:
    #####:  625:      return 5;
        -:  626:    case province:
       16:  627:      return 8;
        -:  628:    case copper:
    #####:  629:      return 0;
        -:  630:    case silver:
       28:  631:      return 3;
        -:  632:    case gold:
       16:  633:      return 6;
        -:  634:    case adventurer:
        4:  635:      return 6;
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    case feast:
    #####:  639:      return 4;
        -:  640:    case gardens:
    #####:  641:      return 4;
        -:  642:    case mine:
    #####:  643:      return 5;
        -:  644:    case remodel:
    #####:  645:      return 4;
        -:  646:    case smithy:
        4:  647:      return 4;
        -:  648:    case village:
    #####:  649:      return 3;
        -:  650:    case baron:
    #####:  651:      return 4;
        -:  652:    case great_hall:
    #####:  653:      return 3;
        -:  654:    case minion:
    #####:  655:      return 5;
        -:  656:    case steward:
    #####:  657:      return 3;
        -:  658:    case tribute:
    #####:  659:      return 5;
        -:  660:    case ambassador:
    #####:  661:      return 3;
        -:  662:    case cutpurse:
    #####:  663:      return 4;
        -:  664:    case embargo: 
    #####:  665:      return 2;
        -:  666:    case outpost:
    #####:  667:      return 5;
        -:  668:    case salvager:
    #####:  669:      return 4;
        -:  670:    case sea_hag:
    #####:  671:      return 4;
        -:  672:    case treasure_map:
    #####:  673:      return 4;
        -:  674:    }
        -:  675:	
    #####:  676:  return -1;
        -:  677:}
        -:  678:
        -:  679:
        -:  680:
        -:  681:
        -:  682:
        -:  683:
        -:  684:
        -:  685:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  686:// -----------------------------------
        -:  687:// ---- MY CODE STARTS HERE ----------
        -:  688:// -----------------------------------
        -:  689:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  690:
        2:  691:void smithyEffect(int currentPlayer, struct gameState* state, int handPos) {
        -:  692:
        -:  693:  int i;
        -:  694:    //+3 Cards
        8:  695:    for (i = 0; i < 3; i++)
        6:  696:        drawCard(currentPlayer, state);
        -:  697:    
        -:  698:    //discard card from hand
        2:  699:    discardCard(handPos, currentPlayer, state, 0);
        2:  700:}
        -:  701:
    #####:  702:void villageEffect(int currentPlayer, struct gameState* state, int handPos) {
        -:  703:
        -:  704:    //+1 Card
    #####:  705:    drawCard(currentPlayer, state);
        -:  706:    
        -:  707:    //+2 Actions
    #####:  708:    state->numActions = state->numActions + 2;
        -:  709:    
        -:  710:    //discard played card from hand
    #####:  711:    discardCard(handPos, currentPlayer, state, 0);
    #####:  712:}
        -:  713:
        -:  714:
        6:  715:void adventurerEffect(int drawntreasure, struct gameState* state, int currentPlayer, int cardDrawn, int* temphand, int z) {
        -:  716:
       25:  717:  while(drawntreasure<2){
        -:  718:    //if the deck is empty we need to shuffle discard and add to deck
       13:  719:    if (state->deckCount[currentPlayer] <1)
        2:  720:      shuffle(currentPlayer, state);
        -:  721:
       13:  722:    drawCard(currentPlayer, state);
        -:  723:
        -:  724:    //top card of hand is most recently drawn card.
       13:  725:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  726:
       13:  727:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12:  728:      drawntreasure++;
        -:  729:
        -:  730:    else{
        1:  731:      temphand[z]=cardDrawn;
        -:  732:
        -:  733:      //this should just remove the top card (the most recently drawn one).
        1:  734:      state->handCount[currentPlayer]--; 
        1:  735:      z++;
        -:  736:    }
        -:  737:  }
        -:  738:
       13:  739:  while(z-1>=0){
        -:  740:    // discard all cards in play that have been drawn
        1:  741:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        1:  742:    z=z-1;
        -:  743:  }
        6:  744:}
        -:  745:
        -:  746:
    #####:  747:void outpostEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  748:  //set outpost flag
    #####:  749:  state->outpostPlayed++;
        -:  750:  
        -:  751:  //discard card
    #####:  752:  discardCard(handPos, currentPlayer, state, 0);
    #####:  753:}
        -:  754:
        -:  755:
    #####:  756:void great_hallEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  757:  //+1 Card
    #####:  758:  drawCard(currentPlayer, state);
        -:  759:
        -:  760:  //+1 Actions
    #####:  761:  state->numActions++;
        -:  762:
        -:  763:  //discard card from hand
    #####:  764:  discardCard(handPos, currentPlayer, state, 0);
    #####:  765:}
        -:  766:
        -:  767:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  768:// -----------------------------------
        -:  769:// ---- MY CODE ENDS HERE ------------
        -:  770:// -----------------------------------
        -:  771:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  772:
        -:  773:
        -:  774:
        -:  775:
        -:  776:
        -:  777:
        -:  778:
        -:  779:
        -:  780:
        -:  781:
        -:  782:
        -:  783:
        -:  784:
        -:  785:
        8:  786:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  787:{
        -:  788:  int i;
        -:  789:  int j;
        -:  790:  int k;
        -:  791:  int x;
        -:  792:  int index;
        8:  793:  int currentPlayer = whoseTurn(state);
        8:  794:  int nextPlayer = currentPlayer + 1;
        -:  795:
        8:  796:  int tributeRevealedCards[2] = {-1, -1};
        -:  797:  int temphand[MAX_HAND];// moved above the if statement
        8:  798:  int drawntreasure=0;
        -:  799:  int cardDrawn;
        8:  800:  int z = 0;// this is the counter for the temp hand
        8:  801:  if (nextPlayer > (state->numPlayers - 1)){
        6:  802:    nextPlayer = 0;
        -:  803:  }
        -:  804:  
        -:  805:	
        -:  806:  //uses switch to select card and perform actions
        8:  807:  switch( card ) 
        -:  808:    {
        -:  809:
        -:  810:
        -:  811:
        -:  812:    // James Cam Abreu code modified
        -:  813:    case adventurer:
        6:  814:      adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        6:  815:      return 0;
        -:  816:
        -:  817:
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:    case council_room:
        -:  823:      //+4 Cards
    #####:  824:      for (i = 0; i < 4; i++)
        -:  825:	{
    #####:  826:	  drawCard(currentPlayer, state);
        -:  827:	}
        -:  828:			
        -:  829:      //+1 Buy
    #####:  830:      state->numBuys++;
        -:  831:			
        -:  832:      //Each other player draws a card
    #####:  833:      for (i = 0; i < state->numPlayers; i++)
        -:  834:	{
    #####:  835:	  if ( i != currentPlayer )
        -:  836:	    {
    #####:  837:	      drawCard(i, state);
        -:  838:	    }
        -:  839:	}
        -:  840:			
        -:  841:      //put played card in played card pile
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:			
    #####:  844:      return 0;
        -:  845:			
        -:  846:
        -:  847:
        -:  848:
        -:  849:
        -:  850:    case feast:
        -:  851:      //gain card with cost up to 5
        -:  852:      //Backup hand
    #####:  853:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  854:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  855:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  856:      }
        -:  857:      //Backup hand
        -:  858:
        -:  859:      //Update Coins for Buy
    #####:  860:      updateCoins(currentPlayer, state, 5);
    #####:  861:      x = 1;//Condition to loop on
    #####:  862:      while( x == 1) {//Buy one card
    #####:  863:	if (supplyCount(choice1, state) <= 0){
        -:  864:	  if (DEBUG)
        -:  865:	    printf("None of that card left, sorry!\n");
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  869:	  }
        -:  870:	}
    #####:  871:	else if (state->coins < getCost(choice1)){
    #####:  872:	  printf("That card is too expensive!\n");
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  876:	  }
        -:  877:	}
        -:  878:	else{
        -:  879:
        -:  880:	  if (DEBUG){
        -:  881:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  882:	  }
        -:  883:
    #####:  884:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  885:	  x = 0;//No more buying cards
        -:  886:
        -:  887:	  if (DEBUG){
        -:  888:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  889:	  }
        -:  890:
        -:  891:	}
        -:  892:      }     
        -:  893:
        -:  894:      //Reset Hand
    #####:  895:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  896:	state->hand[currentPlayer][i] = temphand[i];
    #####:  897:	temphand[i] = -1;
        -:  898:      }
        -:  899:      //Reset Hand
        -:  900:      			
    #####:  901:      return 0;
        -:  902:			
        -:  903:
        -:  904:
        -:  905:
        -:  906:    case gardens:
    #####:  907:      return -1;
        -:  908:			
        -:  909:    case mine:
    #####:  910:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  911:
    #####:  912:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  913:	{
    #####:  914:	  return -1;
        -:  915:	}
        -:  916:		
    #####:  917:      if (choice2 > treasure_map || choice2 < curse)
        -:  918:	{
    #####:  919:	  return -1;
        -:  920:	}
        -:  921:
    #####:  922:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 2, currentPlayer);
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  934:	{
    #####:  935:	  if (state->hand[currentPlayer][i] == j)
        -:  936:	    {
    #####:  937:	      discardCard(i, currentPlayer, state, 0);			
    #####:  938:	      break;
        -:  939:	    }
        -:  940:	}
        -:  941:			
    #####:  942:      return 0;
        -:  943:			
        -:  944:
        -:  945:
        -:  946:
        -:  947:
        -:  948:    case remodel:
    #####:  949:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  950:
    #####:  951:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  952:	{
    #####:  953:	  return -1;
        -:  954:	}
        -:  955:
    #####:  956:      gainCard(choice2, state, 0, currentPlayer);
        -:  957:
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:
        -:  961:      //discard trashed card
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  963:	{
    #####:  964:	  if (state->hand[currentPlayer][i] == j)
        -:  965:	    {
    #####:  966:	      discardCard(i, currentPlayer, state, 0);			
    #####:  967:	      break;
        -:  968:	    }
        -:  969:	}
        -:  970:
        -:  971:
    #####:  972:      return 0;
        -:  973:		
        -:  974:
        -:  975:
        -:  976:
        -:  977:
        -:  978:    // James Cam Abreu code modified
        -:  979:    case smithy: 
        2:  980:      smithyEffect(currentPlayer, state, handPos);
        2:  981:      return 0;
        -:  982:
        -:  983:
        -:  984:    // James Cam Abreu code modified
        -:  985:    case village:
    #####:  986:      villageEffect(currentPlayer, state, handPos);
    #####:  987:      return 0;
        -:  988:
        -:  989:
        -:  990:
        -:  991:
        -:  992:
        -:  993:    case baron:
    #####:  994:      state->numBuys++;//Increase buys by 1!
    #####:  995:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  996:	int p = 0;//Iterator for hand!
    #####:  997:	int card_not_discarded = 1;//Flag for discard set!
    #####:  998:	while(card_not_discarded){
    #####:  999:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1000:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1001:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1002:	    state->discardCount[currentPlayer]++;
    #####: 1003:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1004:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1005:	    }
    #####: 1006:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1007:	    state->handCount[currentPlayer]--;
    #####: 1008:	    card_not_discarded = 0;//Exit the loop
        -: 1009:	  }
    #####: 1010:	  else if (p > state->handCount[currentPlayer]){
        -: 1011:	    if(DEBUG) {
        -: 1012:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1013:	      printf("Must gain an estate if there are any\n");
        -: 1014:	    }
    #####: 1015:	    if (supplyCount(estate, state) > 0){
    #####: 1016:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1017:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1018:	      if (supplyCount(estate, state) == 0){
    #####: 1019:		isGameOver(state);
        -: 1020:	      }
        -: 1021:	    }
    #####: 1022:	    card_not_discarded = 0;//Exit the loop
        -: 1023:	  }
        -: 1024:			    
        -: 1025:	  else{
    #####: 1026:	    p++;//Next card
        -: 1027:	  }
        -: 1028:	}
        -: 1029:      }
        -: 1030:			    
        -: 1031:      else{
    #####: 1032:	if (supplyCount(estate, state) > 0){
    #####: 1033:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1034:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1035:	  if (supplyCount(estate, state) == 0){
    #####: 1036:	    isGameOver(state);
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:	    
        -: 1041:      
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:
        -: 1045:
        -: 1046:
        -: 1047:    // James Cam Abreu code modified
        -: 1048:    case great_hall:
    #####: 1049:      great_hallEffect(state, currentPlayer, handPos);
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:
        -: 1053:
        -: 1054:
        -: 1055:    case minion:
        -: 1056:      //+1 action
    #####: 1057:      state->numActions++;
        -: 1058:			
        -: 1059:      //discard card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
        -: 1061:			
    #####: 1062:      if (choice1)		//+2 coins
        -: 1063:	{
    #####: 1064:	  state->coins = state->coins + 2;
        -: 1065:	}
        -: 1066:			
    #####: 1067:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1068:	{
        -: 1069:	  //discard hand
    #####: 1070:	  while(numHandCards(state) > 0)
        -: 1071:	    {
    #####: 1072:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1073:	    }
        -: 1074:				
        -: 1075:	  //draw 4
    #####: 1076:	  for (i = 0; i < 4; i++)
        -: 1077:	    {
    #####: 1078:	      drawCard(currentPlayer, state);
        -: 1079:	    }
        -: 1080:				
        -: 1081:	  //other players discard hand and redraw if hand size > 4
    #####: 1082:	  for (i = 0; i < state->numPlayers; i++)
        -: 1083:	    {
    #####: 1084:	      if (i != currentPlayer)
        -: 1085:		{
    #####: 1086:		  if ( state->handCount[i] > 4 )
        -: 1087:		    {
        -: 1088:		      //discard hand
    #####: 1089:		      while( state->handCount[i] > 0 )
        -: 1090:			{
    #####: 1091:			  discardCard(handPos, i, state, 0);
        -: 1092:			}
        -: 1093:							
        -: 1094:		      //draw 4
    #####: 1095:		      for (j = 0; j < 4; j++)
        -: 1096:			{
    #####: 1097:			  drawCard(i, state);
        -: 1098:			}
        -: 1099:		    }
        -: 1100:		}
        -: 1101:	    }
        -: 1102:				
        -: 1103:	}
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:
        -: 1107:
        -: 1108:
        -: 1109:
        -: 1110:
        -: 1111:
        -: 1112:    case steward:
    #####: 1113:      if (choice1 == 1)
        -: 1114:	{
        -: 1115:	  //+2 cards
    #####: 1116:	  drawCard(currentPlayer, state);
    #####: 1117:	  drawCard(currentPlayer, state);
        -: 1118:	}
    #####: 1119:      else if (choice1 == 2)
        -: 1120:	{
        -: 1121:	  //+2 coins
    #####: 1122:	  state->coins = state->coins + 2;
        -: 1123:	}
        -: 1124:      else
        -: 1125:	{
        -: 1126:	  //trash 2 cards in hand
    #####: 1127:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1128:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1129:	}
        -: 1130:			
        -: 1131:      //discard card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:
        -: 1136:
        -: 1137:
        -: 1138:
        -: 1139:
        -: 1140:
        -: 1141:
        -: 1142:
        -: 1143:
        -: 1144:    case tribute:
    #####: 1145:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1146:	if (state->deckCount[nextPlayer] > 0){
    #####: 1147:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1148:	  state->deckCount[nextPlayer]--;
        -: 1149:	}
    #####: 1150:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1151:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1152:	  state->discardCount[nextPlayer]--;
        -: 1153:	}
        -: 1154:	else{
        -: 1155:	  //No Card to Reveal
        -: 1156:	  if (DEBUG){
        -: 1157:	    printf("No cards to reveal\n");
        -: 1158:	  }
        -: 1159:	}
        -: 1160:      }
        -: 1161:	    
        -: 1162:      else{
    #####: 1163:	if (state->deckCount[nextPlayer] == 0){
    #####: 1164:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1165:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1166:	    state->deckCount[nextPlayer]++;
    #####: 1167:	    state->discard[nextPlayer][i] = -1;
    #####: 1168:	    state->discardCount[nextPlayer]--;
        -: 1169:	  }
        -: 1170:			    
    #####: 1171:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1172:	} 
    #####: 1173:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1174:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1175:	state->deckCount[nextPlayer]--;
    #####: 1176:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1177:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1178:	state->deckCount[nextPlayer]--;
        -: 1179:      }    
        -: 1180:		       
    #####: 1181:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1182:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1183:	state->playedCardCount++;
    #####: 1184:	tributeRevealedCards[1] = -1;
        -: 1185:      }
        -: 1186:
    #####: 1187:      for (i = 0; i <= 2; i ++){
    #####: 1188:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1189:	  state->coins += 2;
        -: 1190:	}
        -: 1191:		    
    #####: 1192:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1193:	  drawCard(currentPlayer, state);
    #####: 1194:	  drawCard(currentPlayer, state);
        -: 1195:	}
        -: 1196:	else{//Action Card
    #####: 1197:	  state->numActions = state->numActions + 2;
        -: 1198:	}
        -: 1199:      }
        -: 1200:	    
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:
        -: 1204:
        -: 1205:
        -: 1206:
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:
        -: 1212:
        -: 1213:    case ambassador:
    #####: 1214:      j = 0;		//used to check if player has enough cards to discard
        -: 1215:
    #####: 1216:      if (choice2 > 2 || choice2 < 0)
        -: 1217:	{
    #####: 1218:	  return -1;				
        -: 1219:	}
        -: 1220:
    #####: 1221:      if (choice1 == handPos)
        -: 1222:	{
    #####: 1223:	  return -1;
        -: 1224:	}
        -: 1225:
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:	{
    #####: 1228:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1229:	    {
    #####: 1230:	      j++;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (j < choice2)
        -: 1234:	{
    #####: 1235:	  return -1;				
        -: 1236:	}
        -: 1237:
        -: 1238:      if (DEBUG) 
        -: 1239:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1240:
        -: 1241:      //increase supply count for choosen card by amount being discarded
    #####: 1242:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1243:			
        -: 1244:      //each other player gains a copy of revealed card
    #####: 1245:      for (i = 0; i < state->numPlayers; i++)
        -: 1246:	{
    #####: 1247:	  if (i != currentPlayer)
        -: 1248:	    {
    #####: 1249:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1250:	    }
        -: 1251:	}
        -: 1252:
        -: 1253:      //discard played card from hand
    #####: 1254:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1255:
        -: 1256:      //trash copies of cards returned to supply
    #####: 1257:      for (j = 0; j < choice2; j++)
        -: 1258:	{
    #####: 1259:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1260:	    {
    #####: 1261:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1262:		{
    #####: 1263:		  discardCard(i, currentPlayer, state, 1);
    #####: 1264:		  break;
        -: 1265:		}
        -: 1266:	    }
        -: 1267:	}			
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:		
        -: 1271:
        -: 1272:
        -: 1273:
        -: 1274:
        -: 1275:
        -: 1276:
        -: 1277:    case cutpurse:
        -: 1278:
    #####: 1279:      updateCoins(currentPlayer, state, 2);
    #####: 1280:      for (i = 0; i < state->numPlayers; i++)
        -: 1281:	{
    #####: 1282:	  if (i != currentPlayer)
        -: 1283:	    {
    #####: 1284:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1285:		{
    #####: 1286:		  if (state->hand[i][j] == copper)
        -: 1287:		    {
    #####: 1288:		      discardCard(j, i, state, 0);
    #####: 1289:		      break;
        -: 1290:		    }
    #####: 1291:		  if (j == state->handCount[i])
        -: 1292:		    {
    #####: 1293:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1294:			{
        -: 1295:			  if (DEBUG)
        -: 1296:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1297:			}	
    #####: 1298:		      break;
        -: 1299:		    }		
        -: 1300:		}
        -: 1301:					
        -: 1302:	    }
        -: 1303:				
        -: 1304:	}				
        -: 1305:
        -: 1306:      //discard played card from hand
    #####: 1307:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1308:
    #####: 1309:      return 0;
        -: 1310:
        -: 1311:		
        -: 1312:
        -: 1313:
        -: 1314:
        -: 1315:
        -: 1316:    case embargo: 
        -: 1317:      //+2 Coins
    #####: 1318:      state->coins = state->coins + 2;
        -: 1319:			
        -: 1320:      //see if selected pile is in play
    #####: 1321:      if ( state->supplyCount[choice1] == -1 )
        -: 1322:	{
    #####: 1323:	  return -1;
        -: 1324:	}
        -: 1325:			
        -: 1326:      //add embargo token to selected supply pile
    #####: 1327:      state->embargoTokens[choice1]++;
        -: 1328:			
        -: 1329:      //trash card
    #####: 1330:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1331:      return 0;
        -: 1332:		
        -: 1333:
        -: 1334:
        -: 1335:
        -: 1336:
        -: 1337:
        -: 1338:    // James Cam Abreu code modified
        -: 1339:    case outpost:
    #####: 1340:      outpostEffect(state, currentPlayer, handPos);
    #####: 1341:      return 0;
        -: 1342:
        -: 1343:
        -: 1344:
        -: 1345:    case salvager:
        -: 1346:      //+1 buy
    #####: 1347:      state->numBuys++;
        -: 1348:			
    #####: 1349:      if (choice1)
        -: 1350:	{
        -: 1351:	  //gain coins equal to trashed card
    #####: 1352:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1353:	  //trash card
    #####: 1354:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364:
        -: 1365:
        -: 1366:
        -: 1367:
        -: 1368:
        -: 1369:    case sea_hag:
    #####: 1370:      for (i = 0; i < state->numPlayers; i++){
    #####: 1371:	if (i != currentPlayer){
    #####: 1372:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1373:	  state->discardCount[i]++;
    #####: 1374:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1375:	}
        -: 1376:      }
    #####: 1377:      return 0;
        -: 1378:		
        -: 1379:
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388:    case treasure_map:
        -: 1389:      //search hand for another treasure_map
    #####: 1390:      index = -1;
    #####: 1391:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1392:	{
    #####: 1393:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1394:	    {
    #####: 1395:	      index = i;
    #####: 1396:	      break;
        -: 1397:	    }
        -: 1398:	}
    #####: 1399:      if (index > -1)
        -: 1400:	{
        -: 1401:	  //trash both treasure cards
    #####: 1402:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1403:	  discardCard(index, currentPlayer, state, 1);
        -: 1404:
        -: 1405:	  //gain 4 Gold cards
    #####: 1406:	  for (i = 0; i < 4; i++)
        -: 1407:	    {
    #####: 1408:	      gainCard(gold, state, 1, currentPlayer);
        -: 1409:	    }
        -: 1410:				
        -: 1411:	  //return success
    #####: 1412:	  return 1;
        -: 1413:	}
        -: 1414:			
        -: 1415:      //no second treasure_map found in hand
    #####: 1416:      return -1;
        -: 1417:    }
        -: 1418:	
    #####: 1419:  return -1;
        -: 1420:}
        -: 1421:
        -: 1422:
        -: 1423:
        -: 1424:
        -: 1425:
        2: 1426:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1427:{
        -: 1428:	
        -: 1429:  //if card is not trashed, added to Played pile 
        2: 1430:  if (trashFlag < 1)
        -: 1431:    {
        -: 1432:      //add card to played pile
        2: 1433:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1434:      state->playedCardCount++;
        -: 1435:    }
        -: 1436:	
        -: 1437:  //set played card to -1
        2: 1438:  state->hand[currentPlayer][handPos] = -1;
        -: 1439:	
        -: 1440:  //remove card from player's hand
        2: 1441:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1442:    {
        -: 1443:      //reduce number of cards in hand
    #####: 1444:      state->handCount[currentPlayer]--;
        -: 1445:    }
        2: 1446:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1447:    {
        -: 1448:      //reduce number of cards in hand
    #####: 1449:      state->handCount[currentPlayer]--;
        -: 1450:    }
        -: 1451:  else 	
        -: 1452:    {
        -: 1453:      //replace discarded card with last card in hand
        2: 1454:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1455:      //set last card to -1
        2: 1456:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1457:      //reduce number of cards in hand
        2: 1458:      state->handCount[currentPlayer]--;
        -: 1459:    }
        -: 1460:	
        2: 1461:  return 0;
        -: 1462:}
        -: 1463:
        -: 1464:
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:
       34: 1474:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1475:{
        -: 1476:  //Note: supplyPos is enum of choosen card
        -: 1477:	
        -: 1478:  //check if supply pile is empty (0) or card is not used in game (-1)
       34: 1479:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1480:    {
    #####: 1481:      return -1;
        -: 1482:    }
        -: 1483:	
        -: 1484:  //added card for [whoseTurn] current player:
        -: 1485:  // toFlag = 0 : add to discard
        -: 1486:  // toFlag = 1 : add to deck
        -: 1487:  // toFlag = 2 : add to hand
        -: 1488:
       34: 1489:  if (toFlag == 1)
        -: 1490:    {
    #####: 1491:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1492:      state->deckCount[player]++;
        -: 1493:    }
       34: 1494:  else if (toFlag == 2)
        -: 1495:    {
    #####: 1496:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1497:      state->handCount[player]++;
        -: 1498:    }
        -: 1499:  else
        -: 1500:    {
       34: 1501:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       34: 1502:      state->discardCount[player]++;
        -: 1503:    }
        -: 1504:	
        -: 1505:  //decrease number in supply pile
       34: 1506:  state->supplyCount[supplyPos]--;
        -: 1507:	 
       34: 1508:  return 0;
        -: 1509:}
        -: 1510:
       44: 1511:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1512:{
        -: 1513:  int i;
        -: 1514:	
        -: 1515:  //reset coin count
       44: 1516:  state->coins = 0;
        -: 1517:
        -: 1518:  //add coins for each Treasure card in player's hand
      280: 1519:  for (i = 0; i < state->handCount[player]; i++)
        -: 1520:    {
      236: 1521:      if (state->hand[player][i] == copper)
        -: 1522:	{
      107: 1523:	  state->coins += 1;
        -: 1524:	}
      129: 1525:      else if (state->hand[player][i] == silver)
        -: 1526:	{
       51: 1527:	  state->coins += 2;
        -: 1528:	}
       78: 1529:      else if (state->hand[player][i] == gold)
        -: 1530:	{
       15: 1531:	  state->coins += 3;
        -: 1532:	}	
        -: 1533:    }	
        -: 1534:
        -: 1535:  //add bonus
       44: 1536:  state->coins += bonus;
        -: 1537:
       44: 1538:  return 0;
        -: 1539:}
        -: 1540:
        -: 1541:
        -: 1542://end of dominion.c
        -: 1543:
